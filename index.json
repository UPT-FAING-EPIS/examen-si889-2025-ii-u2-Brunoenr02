{
  "README.html": {
    "href": "README.html",
    "title": "OrderApp - Patrón Builder para Órdenes de Compra | OrderApp - Patrón Builder",
    "summary": "OrderApp - Patrón Builder para Órdenes de Compra \uD83D\uDCCB Descripción Aplicación de ejemplo que implementa el Patrón de Diseño Builder para la creación flexible y legible de órdenes de compra. Este proyecto demuestra las mejores prácticas de programación orientada a objetos y diseño de software. \uD83C\uDFAF Objetivo Refactorizar una clase de orden de compra con múltiples propiedades utilizando el patrón Builder, mejorando la legibilidad del código, facilitando el mantenimiento y proporcionando una API fluida para la creación de objetos complejos. \uD83C\uDFD7️ Patrón Builder Implementado Ventajas del Patrón Builder Inmutabilidad: Los objetos PurchaseOrder son inmutables después de su creación Valores por defecto: Proporciona valores razonables sin necesidad de especificarlos Interfaz fluida: Permite encadenar métodos para una sintaxis más legible Validación centralizada: Todas las validaciones están en un solo lugar Flexibilidad: Fácil agregar nuevos parámetros sin romper código existente Estructura del Patrón PurchaseOrder (Producto) └── Objeto inmutable con propiedades de solo lectura PurchaseOrderBuilder (Constructor) ├── Constructor con campos obligatorios ├── Métodos With*() para configuración opcional └── Método Build() para crear el objeto final \uD83D\uDCC1 Estructura del Proyecto examen-si889-2025-ii-u2-Brunoenr02/ │ ├── src/ │ └── OrderApp/ │ ├── OrderApp.csproj # Proyecto principal │ ├── PurchaseOrder.cs # Clase de orden de compra │ └── PurchaseOrderBuilder.cs # Builder pattern │ ├── tests/ │ └── OrderApp.Tests/ │ ├── OrderApp.Tests.csproj # Proyecto de pruebas │ └── PurchaseOrderTests.cs # Pruebas unitarias │ ├── OrderApp.sln # Solución de Visual Studio └── README.md # Este archivo \uD83D\uDE80 Tecnologías Utilizadas .NET 7.0: Framework de desarrollo C# 11: Lenguaje de programación xUnit: Framework de pruebas unitarias Visual Studio Code: IDE recomendado \uD83D\uDCBB Requisitos Previos .NET 7.0 SDK o superior Editor de código (Visual Studio, VS Code, Rider, etc.) Git para control de versiones \uD83D\uDD27 Instalación y Configuración 1. Clonar el repositorio git clone https://github.com/UPT-FAING-EPIS/examen-si889-2025-ii-u2-Brunoenr02.git cd examen-si889-2025-ii-u2-Brunoenr02 2. Restaurar dependencias dotnet restore 3. Compilar el proyecto dotnet build 4. Ejecutar las pruebas dotnet test \uD83D\uDCD6 Uso del Builder Ejemplo Básico // Orden con valores por defecto (Quantity=1, ShippingMethod=\"Estándar\") var order = new PurchaseOrderBuilder(\"Carlos Ruiz\", \"Tablet\") .Build(); Ejemplo con Configuración Completa // Orden con todas las opciones configuradas var order = new PurchaseOrderBuilder(\"Lucía Gómez\", \"Smartphone\") .WithQuantity(2) .WithShipping(\"Express\") .WithGiftWrap() .WithNotes(\"Entregar en horario de oficina\") .Build(); // Obtener resumen string resumen = order.Summary(); Ejemplo con Envoltura sin Notas // Orden con envoltura de regalo pero sin notas var order = new PurchaseOrderBuilder(\"Pedro\", \"Monitor\") .WithGiftWrap() .Build(); \uD83E\uDDEA Pruebas Unitarias El proyecto incluye 3 pruebas unitarias que validan: CrearOrdenBasica_DeberiaRetornarResumenCorrecto: Verifica la creación con valores por defecto CrearOrdenConEnvolturaYNotas_DeberiaIncluirAmbos: Valida la configuración completa de todas las opciones CrearOrdenSinNotas_DeberiaOmitirNotas: Comprueba el manejo correcto de campos opcionales Ejecutar Pruebas # Ejecutar todas las pruebas dotnet test # Ejecutar con salida detallada dotnet test --verbosity detailed # Ejecutar con cobertura de código dotnet test --collect:\"XPlat Code Coverage\" \uD83D\uDCCA Valores por Defecto Propiedad Tipo Valor por Defecto Obligatorio CustomerName string - ✅ Sí Product string - ✅ Sí \uD83D\uDCDA Documentación del Código Todo el código está documentado utilizando comentarios XML de C# que incluyen: Descripciones de clases, métodos y propiedades Parámetros y valores de retorno Ejemplos de uso Excepciones que pueden lanzarse Notas y observaciones importantes Generar Documentación XML dotnet build /p:GenerateDocumentationFile=true \uD83D\uDD04 Comandos Útiles # Limpiar compilaciones anteriores dotnet clean # Compilar en modo Release dotnet build --configuration Release # Ejecutar la aplicación (si tuviera un punto de entrada) dotnet run --project src/OrderApp # Ver información del proyecto dotnet list package \uD83C\uDFA8 Patrones de Diseño Aplicados Builder Pattern Propósito: Separar la construcción de un objeto complejo de su representación Beneficio: Permite crear objetos paso a paso con una interfaz fluida Implementación: PurchaseOrderBuilder construye objetos PurchaseOrder Immutable Object Pattern Propósito: Crear objetos que no pueden ser modificados después de su creación Beneficio: Seguridad en hilos, prevención de efectos secundarios Implementación: Todas las propiedades de PurchaseOrder son de solo lectura"
  },
  "disenio.html": {
    "href": "disenio.html",
    "title": "| OrderApp - Patrón Builder",
    "summary": "classDiagram class PurchaseOrder PurchaseOrder : +String CustomerName PurchaseOrder : +String Product PurchaseOrder : +Int Quantity PurchaseOrder : +String ShippingMethod PurchaseOrder : +Boolean GiftWrap PurchaseOrder : +String Notes PurchaseOrder : +Summary() String class PurchaseOrderBuilder PurchaseOrderBuilder : +WithQuantity() PurchaseOrderBuilder PurchaseOrderBuilder : +WithShipping() PurchaseOrderBuilder PurchaseOrderBuilder : +WithGiftWrap() PurchaseOrderBuilder PurchaseOrderBuilder : +WithNotes() PurchaseOrderBuilder PurchaseOrderBuilder : +Build() PurchaseOrder"
  },
  "index.html": {
    "href": "index.html",
    "title": "OrderApp - Patrón Builder | OrderApp - Patrón Builder",
    "summary": "OrderApp - Patrón Builder Bienvenido a la documentación oficial de OrderApp, una aplicación que implementa el patrón de diseño Builder para la creación de órdenes de compra. \uD83D\uDCDA Documentación README - Guía Completa Diagrama de Clases Reporte de Cobertura \uD83C\uDFD7️ Arquitectura PurchaseOrder (Producto) Clase inmutable que representa una orden de compra con propiedades de solo lectura. PurchaseOrderBuilder (Constructor) Constructor que proporciona una interfaz fluida para crear objetos PurchaseOrder. \uD83D\uDCBB Ejemplo de Uso var order = new PurchaseOrderBuilder(\"Carlos Ruiz\", \"Tablet\") .WithQuantity(2) .WithShipping(\"Express\") .WithGiftWrap() .WithNotes(\"Entregar en horario de oficina\") .Build(); \uD83D\uDE80 Ventajas del Patrón Builder Legibilidad: Código más claro y expresivo Flexibilidad: Fácil agregar nuevos parámetros Inmutabilidad: Objetos seguros y thread-safe Validación: Centralizada en un solo lugar Universidad Privada de Tacna - FAING - EPIS | Documentación generada con DocFX"
  }
}